package org.sunrise.dangdang.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.sunrise.dangdang.bean.User;import org.sunrise.dangdang.service.UserService;import org.sunrise.dangdang.util.Encryption;import org.sunrise.dangdang.util.EntityUtil;import org.sunrise.dangdang.util.ParamDeCode;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;@Controller@RequestMapping(value = "/api/user")public class UserRegisterController {    @Resource    private UserService userService;    @RequestMapping(value = "/register",method = RequestMethod.POST,produces = {"application/json;charset=UTF-8"})    @ResponseBody    public boolean register(@RequestParam(value = "email",required = false)String email,                         @RequestParam(value = "nickName",required = false)String name, @RequestParam(value = "pwd") String password, @RequestParam(value = "sex")String sex, @RequestParam(value = "address")String address, HttpServletRequest request){        sex = ParamDeCode.deCode(sex);        address = ParamDeCode.deCode(address);        User user = EntityUtil.packagingUser(request,email,name,password,sex,address);        System.out.println(user.getEmail());      /*  int a = userService.insertUser(user);*/        request.getSession().setAttribute("registerUser",user);        System.out.println("--------------"+user.toString());      request.getSession().setAttribute("email",email);      return true;    }    @RequestMapping(value = "/registerCode",method = RequestMethod.GET,produces = {"application/json;charset=UTF-8"})    @ResponseBody    public boolean registerCode(HttpServletRequest request){        HttpSession session = request.getSession();        String email = session.getAttribute("email").toString();        String verifyCode = userService.randomCode();        if(userService.emailCode(email,verifyCode)){            session.removeAttribute("email");            session.setAttribute("verifyCode",verifyCode);            return true;        }        return false;    }    @RequestMapping(value = "/verifyCode",method = RequestMethod.POST,produces = {"application/json;charset=UTF-8"})    @ResponseBody    public boolean verifyCode(@RequestParam(value = "code",required = false)String code,HttpServletRequest request){        HttpSession session = request.getSession();        if(session.getAttribute("verifyCode").toString().equals(code)){            if (userService.insertUser((User) session.getAttribute("registerUser"))>0){                return true;            }        }        return false;    }    @RequestMapping(value = "/verifyEmail",method = RequestMethod.GET,produces = {"application/json;charset=UTF-8"})    @ResponseBody    public boolean verifyEmail(@RequestParam String email){        email = Encryption.byteBase64String(email);        if(userService.selectByPrimaryEmail(email) == null){            return true;        }        return false;    }    @RequestMapping(value = "/verifyName",method = RequestMethod.GET,produces = {"application/json;charset=UTF-8"})    @ResponseBody    public boolean verifyName(@RequestParam String name){        if(userService.selectByPrimaryName(name) == null){            return true;        }        return false;    }}